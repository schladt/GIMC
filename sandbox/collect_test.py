import subprocess
import shlex
import time
import os
import json

from collect_procmon import collect_events_full, collect_events

import argparse

parser = argparse.ArgumentParser(description='Collect Procmon events for a given process')
parser.add_argument('process_name', type=str, help='Name of process to collect events for')
parser.add_argument('--runtime', type=int, default=10, help='Number of seconds to run Procmon for')
parser.add_argument('--full', action='store_true', help='Collect full stack traces for each event')
args = parser.parse_args()


runtime = args.runtime
cmds = shlex.split(f'./procmon/Procmon.exe /AcceptEula /Quiet /Minimized /BackingFile procmon_report.pml /Runtime {runtime}')
print(cmds)

def detached_process(cmd):
    CREATE_NEW_PROCESS_GROUP = 0x00000200  # note: could get it from subprocess
    DETACHED_PROCESS = 0x00000008          # 0x8 | 0x200 == 0x208
    subprocess.Popen(cmd, creationflags=DETACHED_PROCESS | CREATE_NEW_PROCESS_GROUP, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

detached_process(cmds)
    
print("Running...")
time.sleep(runtime + 5)

# make sure that report was generated by testing the existence of the file
while not os.path.isfile('procmon_report.pml'):
    time.sleep(1)

print("processing report")

# time how long it takes to process the report
start = time.time()

event_dict = None
if args.full:
    # save procmon report as xml
    cmd = shlex.split(f'./procmon/Procmon.exe /AcceptEula /Quiet /Minimized /OpenLog procmon_report.pml /SaveAs2 procmon_report.xml')
    result = subprocess.run(cmd)

    # check to make sure return code is 0
    if result.returncode != 0:
        print("ERROR: Failed to save procmon report as xml")
        exit(1)

    # parse xml file and save as json
    event_dict = collect_events_full(target_process_name=args.process_name, xml_file='procmon_report.xml')

else:
    # save procmon report as csv
    cmd = shlex.split(f'./procmon/Procmon.exe /AcceptEula /Quiet /Minimized /OpenLog procmon_report.pml /SaveAs procmon_report.csv')
    result = subprocess.run(cmd)

    # check to make sure return code is 0
    if result.returncode != 0:
        print("ERROR: Failed to save procmon report as xml")
        exit(1)
    
    # parse xml file and save as json
    event_dict = collect_events(target_process_name=args.process_name, csv_file='procmon_report.csv')

if not event_dict:
    print("ERROR: Failed to parse xml file")
else:
    with open('procmon_report.json', 'w') as f:
        json.dump(event_dict, f, indent=4)
    print("Done!")
# print how long it took to process the report
print(f"Time to process report: {time.time() - start} seconds")

